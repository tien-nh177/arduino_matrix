const int DATA = 12;
const int CLOCK = 10;
const int LATCH = 11;

const byte SPEED = 10;

byte row[] = {1, 2, 4, 8, 16, 32, 64, 128};
int column[] = {128, 64, 32, 16, 8, 4, 2, 1};
//byte mask[]={0x3C,0x42,0x8D,0xA1,0xA1,0x8D,0x42,0x3C};
byte up[26][8] = {
  {0x00,0xFC,0xFE,0x13,0x13,0xFE,0xFC,0x00},//A
  {B11111111, B10010001, B10010001, B10010001, B01101110, B00000000, B00000000, B00000000},//B
  {B01111110, B10000001, B10000001, B10000001, B10000001, B00000000, B00000000, B00000000},//C
  {B11111111, B10000001, B10000001, B10000001, B01111110, B00000000, B00000000, B00000000},//D
  {B11111111, B10010001, B10010001, B10010001, B10010001, B00000000, B00000000, B00000000},//E
  {B11111111, B10010000, B10010000, B10010000, B10010000, B00000000, B00000000, B00000000},//F
  {B01111110, B10000001, B10000001, B10001001, B01001110, B00001000, B00000000, B00000000},//G
  {0x00,0xFF,0xFF,0x18,0x18,0xFF,0xFF,0x00},//H
  {B10000001, B10000001, B11111111, B10000001, B10000001, B00000000, B00000000, B00000000},//I
  {B10000011, B10000001, B11111111, B10000000, B10000000, B00000000, B00000000, B00000000},//J
  {B11111111, B00011000, B00100100, B01000010, B10000001, B00000000, B00000000, B00000000},//K
  {B11111111, B00000001, B00000001, B00000001, B00000001, B00000000, B00000000, B00000000},//L
  {B11111111, B01000000, B00100000, B01000000, B11111111, B00000000, B00000000, B00000000},//M
  {B11111111, B01000000, B00100000, B00010000, B11111111, B00000000, B00000000, B00000000},//N
  {B01111110, B10000001, B10000001, B10000001, B01111110, B00000000, B00000000, B00000000},//O
  {0x7C,0x62,0x62,0x7C,0x60,0x60,0x60,0x60},//P
  {B01111110, B10000001, B10000001, B10000101, B01111110, B00000001, B00000000, B00000000},//Q
  {B11111111, B10011000, B10010100, B10010010, B01100001, B00000000, B00000000, B00000000},//R
  {B01100001, B10010001, B10010001, B10010001, B01001110, B00000000, B00000000, B00000000},//S
  {B10000000, B10000000, B11111111, B10000000, B10000000, B00000000, B00000000, B00000000},//T
  {B11111110, B00000001, B00000001, B00000001, B11111110, B00000000, B00000000, B00000000},//U
  {B11111100, B00000010, B00000001, B00000010, B11111100, B00000000, B00000000, B00000000},//V
  {B11111111, B00000010, B00000100, B00000010, B11111111, B00000000, B00000000, B00000000},//W
  {B11000011, B00100100, B00011000, B00100100, B11000011, B00000000, B00000000, B00000000},//X
  {0xC3,0x66,0x3C,0x18,0x18,0x18,0x18,0x18},//Y
  {B10000111, B10001001, B10010001, B10100001, B11000001, B00000000, B00000000, B00000000},//Z
};
 
byte num[10][8] = {
  {B01111110, B10000001, B10000001, B10000001, B01111110, B00000000, B00000000, B00000000},
  {B00100001, B01000001, B11111111, B00000001, B00000001, B00000000, B00000000, B00000000},
  {B01000011, B10000101, B10001001, B10010001, B01100001, B00000000, B00000000, B00000000},
  {B01000001, B10010001, B10010001, B10010001, B01101110, B00000000, B00000000, B00000000},
  {B11110000, B00010000, B00010000, B11111111, B00000000, B00000000, B00000000, B00000000},
  {B11110001, B10010001, B10010001, B10010001, B10001110, B00000000, B00000000, B00000000},
  {B01111110, B10010001, B10010001, B10010001, B10001110, B00000000, B00000000, B00000000},
  {B10000000, B10000000, B10011111, B10100000, B11000000, B00000000, B00000000, B00000000},
  {B01101110, B10010001, B10010001, B10010001, B01101110, B00000000, B00000000, B00000000},
  {B01100000, B10010001, B10010001, B10010001, B01111110, B00000000, B00000000, B00000000}
};
 
byte specials[5][8] = {
  {B00011000, B00100100, B01000010, B00100001, B01000010, B00100100, B00011000, B00000000},
  {B00000001, B00000110, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000},
  {B00000001, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000},
  {B11111101, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000}
};
byte leds[8];
//byte d[8];

void copyArr(byte target[8], byte source[8]){
  for(byte i=0;i<8;i++){
    target[i]=source[i];
  }
}

void getArrFromChar(char ch, byte arr[8]) {
  byte ind = (byte) ch; //Lấy mã ASCII của kí t
  if ((ind >= 48) && (ind <= 57)){
    copyArr(arr, num[ind - 48]);
    return;
  }
  if ((ind >= 65) && (ind <= 90)){
    copyArr(arr, up[ind - 65]);
    return;
  }
  switch (ch){
    case '$':
      copyArr(arr, specials[0]);
      break;
    case ',':
      copyArr(arr, specials[1]);
      break;
    case '.':
      copyArr(arr, specials[2]);
      break;
    case '!':
      copyArr(arr, specials[3]);
      break;
   }
}
void addChar(char chr) {
    byte arr[8];
    getArrFromChar(chr, arr);
    for (byte i = 0; i < 8; i++){ 
      if (arr[i] != 0){ 
          addCol(arr[i]);
          }
      addCol(0);
    }
 }
 
 void addCol(byte col) {
      moveLeft();
      leds[7] = col;
      show(leds,SPEED);
}

void moveLeft(){
  for(int j=0;j<8;j++)
    {
        leds[j]=leds[j+1];
    }
}

void show(byte leds[8],byte n){
    for(byte hold=0;hold<n;hold++)
    {
        for (byte i = 0; i < 8; i++) 
        {
          digitalWrite(LATCH, LOW); 
          shiftOut(DATA, CLOCK, MSBFIRST, ~(leds[i])); 
          shiftOut(DATA, CLOCK, MSBFIRST, row[i]);
          digitalWrite(LATCH, HIGH); 
          delay(1); 
        }
    }
}


void parseString (String s){
  s +="        ";
  for(byte i=0;i<s.length();i++){
    if(s.charAt(i) == ' '){
      addCol(0);
      addCol(0);
    }else {
      addChar(s.charAt(i));
    }
  }
}

void setup() {
    pinMode(DATA,OUTPUT);
    pinMode(CLOCK,OUTPUT);
    pinMode(LATCH,OUTPUT);
}
void loop()
{ 
    parseString("HAPPY NEW YEAR 2016");
}

//C:\Users\nho\AppData\Local\Temp\arduino_build_880012
